version: '3.3'

#services describe the containers that will start
services:
    postgresql:
        image: postgres:alpine
        restart: always
        ports:
            - 5432:5432
        networks: 
            - "api.network"
        environment:
            - POSTGRES_USER=user
            - POSTGRES_PASSWORD='pass'
            - POSTGRES_DB='url_check'
            # - POSTGRES_HOST_AUTH_METHOD=trust
        volumes:
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # api is the container name for our Go API
    api:
        environment:
            - PORT=5000
            - PGHOST='postgresql'
            - PGDATABASE='url_check'
            - PGUSER='user'
            - PGPASSWORD='pass'
            - PGPORT=5432
        # It will look for a dockerfile in the project root and build it
        build: "." 

        links:
            - postgresql
        # Exposes the port 5000 from a container and binds it to a random port
        ports:
            - "5000"
        # If the container goes down, it will restart
        restart: "always"
        # Connects the API to a common api.network bridge
        networks: 
            - "api.network"
        depends_on: 
            - postgresql
        # Starts up 5 replicas of the same image
        deploy:
            replicas: 5
    # nginx container
    nginx:
        # specifies the latest nginx image
        image: nginx:latest
        # Connects the conf file of the container to the conf file in our folder
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf:ro
        # It will start up the nginx only when all api containers have started
        depends_on: 
            - api
        # Connects the port 80 of the nginx container to localhost:80 or localhost
        ports: 
            - "80:80"
        networks: 
            - "api.network"
networks: 
    api.network: